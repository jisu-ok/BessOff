import scapy.all as scapy
import time

container_if1 = PMDPort( vdev='eth_vhost_v0_0,iface=/tmp/bessd/vhost_user0_0.sock,queues=1',num_inc_q=1,num_out_q=1,size_inc_q=1024,size_out_q=1024)
output1 = QueueOut(port=container_if1, qid=0)
container_if2 = PMDPort( vdev='eth_vhost_v0_1,iface=/tmp/bessd/vhost_user0_1.sock,queues=1',num_inc_q=1,num_out_q=1,size_inc_q=1024,size_out_q=1024)
input1 = QueueInc(port=container_if2, qid=0)


start_time = time.time()
last_time = start_time


def gen_packet(proto, src_ip, dst_ip):
	pkt_size = int($SN_PKT_SIZE!'60')
	assert(60<=pkt_size<=1522)

	eth = scapy.Ether(src='FF:FF:FF:FF:FF:FF', dst='FF:FF:FF:FF:FF:FF')
	ip = scapy.IP(src='0.0.0.0', dst='0.0.0.0')
	udp = scapy.UDP(sport=0, dport=0)
	payload = ('Helloaae')[:pkt_size-len(eth/ip/udp)]
	pkt = eth/ip/udp/payload
		
	return str(pkt)

packet = gen_packet(scapy.UDP, '','')
packets = [gen_packet('','','')]



#FlowGen(template = gen_packet(scapy.UDP,'0.0.0.0','0.0.0.0',0,0), pps=32000, flow_rate = 1, arrival='uniform', duration='uniform', quick_rampup = True) -> Rewrite(templates=packets) -> Timestamp(offset=42) -> L4Checksum() -> output1


s::Source()  -> Timestamp(offset=42)   -> output1
input1 -> m::Measure(offset=42) -> Sink()

#bess.add_tc('pktgen', policy='rate_limit',resource='packet', limit={'packet': 32000})
#s.attach_task('pktgen')

start_time = time.time()
last_time = start_time
bess.resume_all()




#m::Measure()
#bess.resume_all()


print('{} RTT (us)                             '.format(' ' * 41), end='')
print('   jitter (us)')
print('{}    avg    min    50%    99%      max '.format(' ' * 41), end='')
print('      avg    min    50%    99%      max')
while True:
    time.sleep(1)

    # get_summary() doesn't require workers to be stopped
    ret = m.get_summary(clear=True,  # reset stats every interval
                        latency_percentiles=[50, 99],
                        jitter_percentiles=[50, 99])

    diff_ts = ret.timestamp - last_time
    diff_pkts = ret.packets / diff_ts
    diff_bits = ret.bits / diff_ts
    last_time = ret.timestamp

    print('%12.6f: %5.3f Mpps, %8.3f Mbps, ' \
          '%7.3f %6.1f %6.1f %6.1f %8.1f'   %
          (ret.timestamp - start_time,
           diff_pkts / 1e6,
           diff_bits / 1e6,
           ret.latency.avg_ns,
           ret.latency.min_ns,
           ret.latency.percentile_values_ns[0],
           ret.latency.percentile_values_ns[1],
           ret.latency.max_ns))
