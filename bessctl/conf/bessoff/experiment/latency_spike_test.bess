## NF chain of interest
port0 = PMDPort(port_id=0, num_inc_q=1)
input0 = QueueInc(port=port0, qid=0)

fw0_1 = ACL(rules=[{'src_ip': '192.168.0.0/16', 'drop': False}])
fw0_2= ACL(rules=[{'src_ip': '192.168.0.0/16', 'drop': False}])
fw0_3 = ACL(rules=[{'src_ip': '192.168.0.0/16', 'drop': False}])

input0 -> Timestamp(offset=42) -> fw0_1 -> fw0_2 -> fw0_3 -> m::Measure(offset=42) -> Sink()

## NF chain of interest
port1 = PMDPort(port_id=1, num_inc_q=1)
input1 = QueueInc(port=port1, qid=0)

fw1_1 = ACL(rules=[{'src_ip': '192.168.0.0/16', 'drop': False}])
fw1_2= ACL(rules=[{'src_ip': '192.168.0.0/16', 'drop': False}])
fw1_3 = ACL(rules=[{'src_ip': '192.168.0.0/16', 'drop': False}])

input1 -> fw1_1 -> fw1_2 -> fw1_3 -> Sink()



bess.resume_all()
print('{} RTT (us)                             '.format(' ' * 41), end='')
print('   jitter (us)')
print('{}    avg    min    50%    99%      max '.format(' ' * 41), end='')
print('      avg    min    50%    99%      max')

while True:
    time.sleep(1)

    # get_summary() doesn't require workers to be stopped
    ret = m.get_summary(clear=True,  # reset stats every interval
                        latency_percentiles=[50, 99],
                        jitter_percentiles=[50, 99])

    diff_ts = ret.timestamp - last_time
    diff_pkts = ret.packets / diff_ts
    diff_bits = ret.bits / diff_ts
    last_time = ret.timestamp

    print('%12.6f: %5.3f Mpps, %8.3f Mbps, ' \
          '%7.3f %6.1f %6.1f %6.1f %8.1f'   %
          (ret.timestamp - start_time,
           diff_pkts / 1e6,
           diff_bits / 1e6,
           ret.latency.avg_ns,
           ret.latency.min_ns,
           ret.latency.percentile_values_ns[0],
           ret.latency.percentile_values_ns[1],
           ret.latency.max_ns))
