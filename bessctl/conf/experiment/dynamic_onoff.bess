import time

acl_rules = [
    {'src_ip': '110.110.110.110', 'drop': False},
    {'dst_ip': '110.110.110.110', 'drop': False},
    {'src_port': 2345, 'drop': False},
    {'dst_port': 2345, 'drop': False},
    {'src_ip': '110.110.110.110', 'dst_ip': '110.110.110.110', 'drop': False},
    {'src_ip': '110.110.110.110', 'dst_port': 424, 'drop': False},
    {'dst_ip': '110.110.110.110', 'dst_port': 2244, 'drop': False},
    {'src_port': 1414, 'dst_port': 1414, 'drop': False},
    {'src_ip': '110.110.110.110', 'dst_ip': '110.110.110.110', 'src_port': 2353, 'dst_port': 2353, 'drop': False},
    {'src_ip': '192.168.1.1/0', 'drop': False},
]

## NF chain of interest
port0 = PMDPort(port_id=0, num_inc_q=1, num_out_q=1)
input0 = QueueInc(port=port0, qid=0)

container1_p1 = VPort(ifname='eth_vport1', docker='ctr1', ip_addrs=['172.17.0.2/24'])
container1_p2 = VPort(ifname='eth_vport2', docker='ctr1', ip_addrs=['172.18.0.2/24'])

container2_p1 = VPort(ifname='eth_vport1', docker='ctr2', ip_addrs=['172.17.0.3/24'])
container2_p2 = VPort(ifname='eth_vport2', docker='ctr2', ip_addrs=['172.20.0.2/24'])

container3_p1 = VPort(ifname='eth_vport1', docker='ctr3', ip_addrs=['172.17.0.4/24'])
container3_p2 = VPort(ifname='eth_vport2', docker='ctr3', ip_addrs=['172.21.0.2/24'])

pm1 = PointMachine()
fw1 = ACL(rules=acl_rules)
cf1 = Confluence()

pm2 = PointMachine()
fw2 = ACL(rules=acl_rules)
cf2 = Confluence()

pm3 = PointMachine()
fw3 = ACL(rules=acl_rules)
cf3 = Confluence()

# monitor0 = FlowMonitor()
# vlan0 = VLANPush(tci=2)

input0 -> Timestamp(offset=42) -> pm1
pm1:0 -> PortOut(port=container1_p1)
p1::PortInc(port=container1_p2) -> 0:cf1
pm1:1 -> fw1 -> 1:cf1

cf1 -> pm2
pm2:0 -> PortOut(port=container2_p1)
p2::PortInc(port=container2_p2) -> 0:cf2
pm2:1 -> fw2 -> 1:cf2

cf2 -> pm3
pm3:0 -> PortOut(port=container3_p1)
p3::PortInc(port=container3_p2) -> 0:cf3
pm3:1 -> fw3 -> 1:cf3

cf3 -> m::Measure(offset=42) -> Sink()


## Competing NF Chain
port1 = PMDPort(port_id=1, num_inc_q=1, num_out_q=1)
input1 = QueueInc(port=port1, qid=0)

# container4_p1 = VPort(ifname='eth_vport1', docker='container4', ip_addrs=['10.0.0.7/24'])
# container4_p2 = VPort(ifname='eth_vport2', docker='container4', ip_addrs=['10.0.0.8/24'])

# container5_p1 = VPort(ifname='eth_vport1', docker='container5', ip_addrs=['10.0.0.9/24'])
# container5_p2 = VPort(ifname='eth_vport2', docker='container5', ip_addrs=['10.0.0.10/24'])

# container6_p1 = VPort(ifname='eth_vport1', docker='container6', ip_addrs=['10.0.0.11/24'])
# container6_p2 = VPort(ifname='eth_vport2', docker='container6', ip_addrs=['10.0.0.12/24'])

fw4 = ACL(rules=acl_rules)
fw5 = ACL(rules=acl_rules)
fw6 = ACL(rules=acl_rules)


# input1 -> PortOut(port=container4_p1)
# PortInc(port=container4_p2) -> PortOut(port=container5_p1)
# PortInc(port=container5_p2) -> PortOut(port=container6_p1)
# PortInc(port=container6_p2) -> Sink()

input1 -> fw4 -> fw5 -> fw6 -> Sink()
bess.add_worker(wid=0, core=0)
bess.add_worker(wid=1, core=1)
input0.attach_task(wid=0)
p1.attach_task(wid=0)
p2.attach_task(wid=0)
p3.attach_task(wid=0)
input1.attach_task(wid=1)

# fw1::ACL(rules=[{'src_ip': '10.0.0.0/8', 'drop': False}])
# monitor1::FlowMonitor()
# vlan1::VLANPush(tci=2)
# input1 -> fw0 -> monitor0 -> vlan0 -> Sink()



# -- For test --
# bess.resume_all()
# time.sleep(10)
# pm.switch_to_on()
# time.sleep(10)
# pm.switch_to_off()

# --------------


# agent(
#     latency_measure=m,
#     pm_list = [pm1, pm2, pm3]
# )




last_time = time.time()
start_time = time.time()
bess.resume_all()

print('{} RTT (us)                             '.format(' ' * 41), end='')
print('   jitter (us)')
print('{}    avg    min    50%    99%      max '.format(' ' * 41), end='')
print('      avg    min    50%    99%      max')
while True:
    time.sleep(1)

    # get_summary() doesn't require workers to be stopped
    ret = m.get_summary(clear=True,  # reset stats every interval
                        latency_percentiles=[50, 99],
                        jitter_percentiles=[50, 99])

    diff_ts = ret.timestamp - last_time
    diff_pkts = ret.packets / diff_ts
    diff_bits = ret.bits / diff_ts
    last_time = ret.timestamp

    print('%12.6f: %5.3f Mpps, %8.3f Mbps, ' \
          '%7.3f %6.1f %6.1f %6.1f %8.1f'   %
          (ret.timestamp - start_time,
           diff_pkts / 1e6,
           diff_bits / 1e6,
           ret.latency.avg_ns,
           ret.latency.min_ns,
           ret.latency.percentile_values_ns[0],
           ret.latency.percentile_values_ns[1],
           ret.latency.max_ns))

