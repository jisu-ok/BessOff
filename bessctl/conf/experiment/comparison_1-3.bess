import time

fw::ACL(rules = [\
    {'src_ip': '110.110.110.110', 'drop': False},
    {'dst_ip': '110.110.110.110', 'drop': False},
    {'src_port': 2345, 'drop': False},
    {'dst_port': 2345, 'drop': False},
    {'src_ip': '110.110.110.110', 'dst_ip': '110.110.110.110', 'drop': False},
    {'src_ip': '110.110.110.110', 'dst_port': 424, 'drop': False},
    {'dst_ip': '110.110.110.110', 'dst_port': 2244, 'drop': False},
    {'src_port': 1414, 'dst_port': 1414, 'drop': False},
    {'src_ip': '110.110.110.110', 'dst_ip': '110.110.110.110', 'src_port': 2353, 'dst_port': 2353, 'drop': False},
    {'src_ip': '192.168.1.1/0', 'drop': False},
])

fw2::ACL(rules = [\
    {'src_ip': '110.110.110.110', 'drop': False},
    {'dst_ip': '110.110.110.110', 'drop': False},
    {'src_port': 2345, 'drop': False},
    {'dst_port': 2345, 'drop': False},
    {'src_ip': '110.110.110.110', 'dst_ip': '110.110.110.110', 'drop': False},
    {'src_ip': '110.110.110.110', 'dst_port': 424, 'drop': False},
    {'dst_ip': '110.110.110.110', 'dst_port': 2244, 'drop': False},
    {'src_port': 1414, 'dst_port': 1414, 'drop': False},
    {'src_ip': '110.110.110.110', 'dst_ip': '110.110.110.110', 'src_port': 2353, 'dst_port': 2353, 'drop': False},
    {'src_ip': '192.168.1.1/0', 'drop': False},
])

port0 = PMDPort(port_id=0, num_inc_q=1, num_out_q=1)
port1 = PMDPort(port_id=1, num_inc_q=1, num_out_q=1)
input0 = QueueInc(port=port0, qid=0)
output1 = QueueOut(port=port1, qid=0)

container1_p1 = VPort(ifname='eth_vport1', docker='ctr1', ip_addrs=['172.17.0.2/24'])
container1_p2 = VPort(ifname='eth_vport2', docker='ctr1', ip_addrs=['172.18.0.2/24'])

container2_p1 = VPort(ifname='eth_vport1', docker='ctr2', ip_addrs=['172.17.0.3/24'])
container2_p2 = VPort(ifname='eth_vport2', docker='ctr2', ip_addrs=['172.20.0.2/24'])

container3_p1 = VPort(ifname='eth_vport1', docker='ctr3', ip_addrs=['172.17.0.4/24'])
container3_p2 = VPort(ifname='eth_vport2', docker='ctr3', ip_addrs=['172.21.0.2/24'])


input0 \
    -> Timestamp(offset=42) \
    -> PortOut(port=container1_p1)
PortInc(port=container1_p2) -> fw-> fw2-> m::Measure(offset=42) -> output1

last_time = time.time()
start_time = time.time()
bess.resume_all()

print('{} RTT (us)                             '.format(' ' * 41), end='')
print('   jitter (us)')
print('{}    avg    min    50%    99%      max '.format(' ' * 41), end='')
print('      avg    min    50%    99%      max')
while True:
    time.sleep(1)

    # get_summary() doesn't require workers to be stopped
    ret = m.get_summary(clear=True,  # reset stats every interval
                        latency_percentiles=[50, 99],
                        jitter_percentiles=[50, 99])

    diff_ts = ret.timestamp - last_time
    diff_pkts = ret.packets / diff_ts
    diff_bits = ret.bits / diff_ts
    last_time = ret.timestamp

    print('%12.6f: %5.3f Mpps, %8.3f Mbps, ' \
          '%7.3f %6.1f %6.1f %6.1f %8.1f'   %
          (ret.timestamp - start_time,
           diff_pkts / 1e6,
           diff_bits / 1e6,
           ret.latency.avg_ns,
           ret.latency.min_ns,
           ret.latency.percentile_values_ns[0],
           ret.latency.percentile_values_ns[1],
           ret.latency.max_ns))







