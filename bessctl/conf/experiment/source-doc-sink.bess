import scapy.all as scapy
import time
container_if = VPort(ifname='eth_vport2', docker='ctr1', ip_addrs=['172.17.0.2/24'])
host_if = VPort(ifname='eth_host1', ip_addrs=['172.17.0.1/24'])
#container_if2 = VPort(ifname='eth_vport_test2', ip_addrs=['10.255.99.3/24'])


def gen_packet(proto, src_ip, dst_ip):
	pkt_size = int($SN_PKT_SIZE!'60')
	assert(60<=pkt_size<=1522)

	eth = scapy.Ether(src='FF:FF:FF:FF:FF:FF', dst='FF:FF:FF:FF:FF:FF')
	ip = scapy.IP(src='10.255.99.1', dst='10.255.99.2')
	udp = scapy.UDP(sport=7202, dport=7203)
	payload = ('Helloaae')[:pkt_size-len(eth/ip/udp)]
	pkt = eth/ip/udp/payload
	pkt.show2()
		
	return str(pkt)

packet = gen_packet(scapy.UDP, '','')
packets = [gen_packet('','','')]


s::Source() -> Rewrite(templates=packets)->Timestamp(offset=42) -> PortOut(port=container_if)
PortInc(port=container_if) -> m::Measure(offset=42) -> Sink()

bess.add_tc('pktgen', policy='rate_limit',
            resource='packet', limit={'packet': 32000})
s.attach_task('pktgen')




last_time = time.time()
start_time = time.time()
bess.resume_all()

print('{} RTT (us)                             '.format(' ' * 41), end='')
print('   jitter (us)')
print('{}    avg    min    50%    99%      max '.format(' ' * 41), end='')
print('      avg    min    50%    99%      max')
while True:
    time.sleep(1)

    # get_summary() doesn't require workers to be stopped
    ret = m.get_summary(clear=True,  # reset stats every interval
                        latency_percentiles=[50, 99],
                        jitter_percentiles=[50, 99])

    diff_ts = ret.timestamp - last_time
    diff_pkts = ret.packets / diff_ts
    diff_bits = ret.bits / diff_ts
    last_time = ret.timestamp

    print('%12.6f: %5.3f Mpps, %8.3f Mbps, ' \
          '%7.3f %6.1f %6.1f %6.1f %8.1f'   %
          (ret.timestamp - start_time,
           diff_pkts / 1e6,
           diff_bits / 1e6,
           ret.latency.avg_ns,
           ret.latency.min_ns,
           ret.latency.percentile_values_ns[0],
           ret.latency.percentile_values_ns[1],
           ret.latency.max_ns))



